Require Import Coq.Lists.List.
Require Import Coq.Bool.Bool.

Open Scope list_scope.

Module ListNotations.
Notation "[ ]" := nil (format "[ ]") : list_scope.
Notation "[ x ]" := (cons x nil) : list_scope.
Notation "[ x ; y ; .. ; z ]" := (cons x (cons y .. (cons z nil) ..)) : list_scope.
End ListNotations.

Import ListNotations.

Section nets.

  (* Auxiliary function called by sort *)
  Fixpoint insert (p : (nat * nat)) (l : list (nat * nat)) :=
    match l with
    | [] => [p]
    | h :: t => if (Nat.ltb (fst p) (fst h)) then p :: h :: t
                else if (Nat.eqb (fst p) (fst h)) && (Nat.ltb (snd p) (snd h)) then p :: h :: t
                else h :: insert p t
    end.

  (* Function used to sort the list of edges *)
  Fixpoint sort (l : list (nat * nat)) : list (nat * nat) :=
    match l with
    | [] => []
    | h :: t => insert h (sort t)
    end.

  Fixpoint get_second (edges : list (nat * nat)) (leader : nat) : nat :=
    match edges with
      | (a,b) :: edges' => if (Nat.eqb a leader)
                           then b
                           else get_second edges' leader
      | nil => 0
    end.

  Fixpoint get_parent (edges : list (nat * nat)) (node : nat) : nat :=
    match edges with
      | (a,b) :: edges' => if (Nat.eqb node b) then a
                           else get_parent edges' node
      | nil => 0
    end.

  Fixpoint get_children (edges : list (nat * nat)) (node : nat) : list nat :=
    match edges with
      | (a,b) :: edges' => if (Nat.eqb node a) then b :: get_children edges' node
                           else get_children edges' node
      | nil => nil
    end.

  Fixpoint is_parent_func (edges : list (nat * nat)) (a b : nat) : Prop :=
    match edges with
      | nil => False
      | h :: t => h = (a,b) \/ is_parent_func t a b
    end.

  Fixpoint is_parent_func_bool (edges : list (nat * nat)) (a b : nat) : bool :=
    match edges with
      | nil => false
      | h :: t => ((Nat.eqb (fst h) a) && (Nat.eqb (snd h) b)) || is_parent_func_bool t a b
    end.

  Fixpoint list_sum (ls : list nat) : nat :=
  match ls with
    | nil => 0
    | h :: ls' => h + list_sum ls'
  end.

  Fixpoint list_sum_times (ls : list nat) (n : nat) :=
  match n with
    | 0 => 0
    | S n' => (list_sum ls) + list_sum_times ls n'
  end.

  Fixpoint get_level_run_once (edges : list (nat * nat)) (node_and_depth : nat * nat) : nat * nat := 
  match edges with
    | (a,b) :: edges' => if (Nat.eqb b (fst node_and_depth)) then get_level_run_once edges' (a, (snd node_and_depth) + 1)
                         else get_level_run_once edges' ((fst node_and_depth), (snd node_and_depth))
    | nil => ((fst node_and_depth), (snd node_and_depth))
  end.

  Definition get_level_run_once_result (edges : list (nat * nat)) (node : nat) : nat * nat := 
  get_level_run_once edges (node, 1).

  Fixpoint get_level_run_all (edges : list (nat * nat)) (times : nat) (node_and_depth : nat * nat) : nat * nat := 
    match times with
      | 0 => ((fst node_and_depth), (snd node_and_depth))
      | S n => get_level_run_all edges n (fst (get_level_run_once edges node_and_depth),
                                          snd (get_level_run_once edges node_and_depth))
    end.

  Definition get_level (edges : list (nat * nat)) (node : nat) : nat := 
  snd (get_level_run_all edges (length edges) (node, 1)).

  Definition get_node_order (node : nat) : nat := 10.


  (* Structure definition.
     The variables and functions of a network object are:

     - nodes:             number of nodes in the network
     - leader:            index of the leader node
     - superior:          list of pairs representing which nodes are direct subordinates of which (graph edges)
     - state:             list of node states
     - second-in-command: index of the node that is the second-in-command of the current leader
     - parent:            function that returns the parent of a given node
     - children:          function that returns the list of children of a given node
     - is_parent:         function that informs is one node is the parent of another or not (returns Prop type)
     - is_parent_bool:    function that informs is one node is the parent of another or not (returns bool type)
     - node_level:        function that returns the level of a node in the hierarchy (leader is level 1)
   *)
  Structure net : Type := {
                  nodes : nat ;
                  leader : nat ;
                  superior : list (nat * nat) ;
                  state : list (nat * nat) ;
                  second_in_command : nat := get_second superior leader ;
                  parent : nat -> nat := get_parent superior ;
                  children : nat -> list nat := get_children superior ;
                  is_parent :  nat -> nat -> Prop := is_parent_func superior;
                  is_parent_bool :  nat -> nat -> bool := is_parent_func_bool superior;
                  node_level : nat -> nat := get_level superior ;
            }.


  Definition leader_is_in_net := forall n : net, leader n <= nodes n.
  
  Definition no_self_superior := forall (n : net) (i : nat), fst (nth i (superior n) (0,0)) <> snd (nth i (superior n) (0,0)).
  

  (* Definition of some network examples for testing purposes *)
  Definition net_1 : net := Build_net 7 1
                            ((1 , 2) :: (1 , 3) :: (2 , 4) :: (2 , 5) :: (3 , 6) :: (3 , 7) :: nil)
                            ((1 , 1) :: (2 , 1) :: (3 , 1) :: (4 , 1) :: (5 , 1) :: (6 , 1) :: (7 , 1) :: nil).
  Definition net_1_scrambled : net := Build_net 7 1
                                      ((3 , 6) :: (1 , 2) :: (3 , 7) :: (2 , 4) :: (2 , 5) :: (1 , 3) :: nil)
                                      ((1 , 1) :: (2 , 1) :: (3 , 1) :: (4 , 1) :: (5 , 1) :: (6 , 1) :: (7 , 1) :: nil).
  Definition net_100 : net := Build_net 7 100
                            ((100 , 200) :: (100 , 300) :: (200 , 400) :: (200 , 500) :: (300 , 600) :: (300 , 700) :: nil)
                            ((100 , 1) :: (200 , 1) :: (300 , 1) :: (400 , 1) :: (500 , 1) :: (600 , 1) :: (700 , 1) :: nil).
  Definition net_15 : net := Build_net 15 1
                            (( 1 ,  2) :: ( 1 ,  3) :: ( 2 ,  4) :: ( 2 ,  5) :: ( 3 ,  6) :: ( 3 ,  7) :: 
                             ( 4 ,  8) :: ( 4 ,  9) :: ( 5 , 10) :: ( 5 , 11) :: ( 6 , 12) :: ( 6 , 13) :: 
                             ( 7 , 14) :: ( 7 , 15) :: nil)
                            (( 1 ,  1) :: ( 2 ,  1) :: ( 3 ,  1) :: ( 4 ,  1) :: ( 5 ,  1) :: ( 6 ,  1) :: ( 7 ,  1) ::
                             ( 8 ,  1) :: ( 9 ,  1) :: (10 ,  1) :: (11 ,  1) :: (12 ,  1) :: (13 ,  1) :: (14 ,  1) :: 
                             (15 ,  1) :: nil).
  Definition net_wide : net := Build_net 9 1
                            ((1 , 2) :: (1 , 3) :: (1 , 4) :: (1 , 5) :: (1 , 6) :: (1 , 7) :: (1 , 8) :: (1 , 9) :: nil)
                            ((1 , 1) :: (2 , 1) :: (3 , 1) :: (4 , 1) :: (5 , 1) :: (6 , 1) :: (7 , 1) :: (8 , 1) :: nil).

  (*For testing*)
  Fixpoint remove_node_from_list (edges : list (nat * nat)) (i : nat) : list (nat * nat) :=
    match edges with
      | nil => nil
      | (a,b) :: edges' => if (Nat.eqb a i) || (Nat.eqb b i)
                           then remove_node_from_list edges' i
                           else (a,b) :: remove_node_from_list edges' i
    end.

  Fixpoint change_leader (edges : list (nat * nat)) (old new : nat) : list (nat * nat) :=
    match edges with
      | nil => nil
      | (a,b) :: edges' => if (Nat.eqb a old) && (Nat.eqb b new)
                           then change_leader edges' old new
                           else if (Nat.eqb a old)
                                then (new,b) :: change_leader edges' old new
                                else if (Nat.eqb b old)
                                     then (a,new) :: change_leader edges' old new
                                     else (a,b) :: change_leader edges' old new
    end.

  Definition next_leader (n : net) : net := Build_net ((nodes n) - 1) (second_in_command n)
                                          (change_leader (superior n) (leader n) (second_in_command n)) (state n).

  Fixpoint num_children (edges : list (nat * nat)) (node count : nat) : nat :=
    match edges with
      | nil => count
      | (a,b) :: edges' => if (Nat.eqb a node)
                           then num_children edges' node (count+1)
                           else num_children edges' node count
    end.

  Compute change_leader (superior net_1) (leader net_1) (second_in_command net_1).


  (* Examples of networks generated by applying next_leader. *)
  Definition net_2 := next_leader net_1.
  Definition net_3 := next_leader net_2.
  Definition net_14 := next_leader net_15.
  Definition net_wide_next := next_leader net_wide.
  Definition net_wide_next_2 := next_leader net_wide_next.

  Definition is_top (i : nat) (l : list (nat * nat)) : Prop :=
  forall j : nat, snd (nth j l (0,0)) <> i.

  Definition leader_is_top (n : net) : Prop := forall i : nat, snd (nth i (superior n) (0,0)) <> leader n.
  Check leader_is_top.
  Check leader_is_top net_1.
  Check leader_is_top net_2.

  Compute nodes net_15.
  Compute leader net_15.
  Compute node_level net_15 1.
  Compute node_level net_15 2.
  Compute node_level net_15 3.
  Compute node_level net_15 4.
  Compute node_level net_15 5.
  Compute node_level net_15 6.
  Compute node_level net_15 7.
  Compute node_level net_15 8.
  Compute node_level net_15 9.
  Compute node_level net_15 10.
  Compute node_level net_15 11.
  Compute node_level net_15 12.
  Compute node_level net_15 13.
  Compute node_level net_15 14.
  Compute node_level net_15 15.
  Compute children net_15 4.
  Compute children net_15 5.
  Compute children net_15 6.
  Compute children net_15 7.

  Compute leader net_14.
  Compute nodes net_14.

  Compute nodes net_wide.
  Compute children net_wide 1.
  Compute node_level net_wide 1.
  Compute node_level net_wide 2.
  Compute node_level net_wide 3.
  Compute node_level net_wide 4.
  Compute node_level net_wide 5.
  Compute node_level net_wide 6.
  Compute node_level net_wide 7.
  Compute node_level net_wide 8.
  Compute node_level net_wide 9.

  Compute nodes net_wide_next.
  Compute leader net_wide_next.
  Compute children net_wide_next 2.
  Compute node_level net_wide_next 2.
  Compute node_level net_wide_next 3.
  Compute node_level net_wide_next 4.
  Compute node_level net_wide_next 5.
  Compute node_level net_wide_next 6.
  Compute node_level net_wide_next 7.
  Compute node_level net_wide_next 8.
  Compute node_level net_wide_next 9.

  Compute nodes net_wide_next_2.
  Compute leader net_wide_next_2.
  Compute children net_wide_next_2 3.
  Compute node_level net_wide_next_2 3.
  Compute node_level net_wide_next_2 4.
  Compute node_level net_wide_next_2 5.
  Compute node_level net_wide_next_2 6.
  Compute node_level net_wide_next_2 7.
  Compute node_level net_wide_next_2 8.
  Compute node_level net_wide_next_2 9.

  (* Boolean function that returns true if a given number is in a list and false otherwise. *)
  Fixpoint in_list (n : nat) (l : list nat) : bool :=
    match l with
      | nil => false
      | a :: l' => Nat.eqb a n || in_list n l'
    end.

End nets.